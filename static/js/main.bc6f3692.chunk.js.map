{"version":3,"sources":["views/loadPage/LoadPage.js","main/Routes.js","main/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","marginLeft","spacing","height","width","marginTop","alignItems","justifyContent","LoadPage","classes","className","key","CircularProgress","color","HomePage","lazy","props","fallback","exact","path","component","from","to","App","Routes","Boolean","window","location","hostname","match","client","ApolloClient","uri","WrappedApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAIMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,QAAS,OACT,YAAa,CACXC,WAAYH,EAAMI,QAAQ,IAE5BC,OAAQ,OACRC,MAAO,OACPC,UAAW,MACXC,WAAY,SACZC,eAAgB,cAIL,SAASC,IACtB,IAAMC,EAAUb,IAEhB,OACE,yBAAKc,UAAWD,EAAQV,KAAMY,IAAK,YACjC,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAkBC,MAAM,eCpB9B,IAAMC,EAAWC,gBAAK,kBAAM,uDAEb,WAAAC,GAAK,OAClB,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAACT,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAUO,KAAK,IAAIC,GAAG,UCHfC,MAJf,WACE,OAAO,kBAACC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCVAC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,oCAGDC,EACJ,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,EAAD,OAIJI,IAASC,OAAOF,EAAYG,SAASC,eAAe,SD+G9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bc6f3692.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    '& > * + *': {\n      marginLeft: theme.spacing(4),\n    },\n    height: \"100%\",\n    width: \"100%\",\n    marginTop: '75%',\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n}));\n\nexport default function LoadPage() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root} key={'LoadPage'}>\n      <CircularProgress />\n      <CircularProgress color=\"secondary\" />\n    </div>\n  );\n}\n","import React , { Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport LoadPage from '../views/loadPage/LoadPage'\n\nconst HomePage = lazy(() => import('../views/home/HomePage'));\n\nexport default props => (\n  <Router>\n    <Suspense fallback={<LoadPage />}>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage}/>\n        <Redirect from='*' to='/' />\n      </Switch>\n    </Suspense>\n  </Router>\n)","import React from 'react'\nimport './App.css'\nimport Routes from '../main/Routes'\n\nfunction App() {\n  return <Routes />\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './main/App'\nimport * as serviceWorker from './serviceWorker'\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-components'\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-pokemon.now.sh/'\n});\n\nconst WrappedApp = (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n\nReactDOM.render(WrappedApp, document.getElementById('root'))\n\nserviceWorker.unregister();"],"sourceRoot":""}