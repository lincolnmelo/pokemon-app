{"version":3,"sources":["views/cards/Card.jsx","services/testePokemon.js","views/cards/Cards.jsx","views/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","content","nome","tipo","numero","client","ApolloClient","uri","setNamesPokemons","name","query","gql","pokemon","getPokemons","querys","forEach","a","result","console","log","listCard","Cards","map","Views","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAUeA,G,YARF,SAAC,GAAyC,IAAD,IAAtCC,QAAWC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,OACrC,OAAO,oCACL,kCAAQA,GACR,qCAAWF,GACX,qCAAWC,M,+WCHf,IAAME,EAAS,IAAIC,IAAa,CAC9BC,IAAK,oCAGDC,EAAmB,SAACC,GAmBxB,MAlBe,CACbC,MAAOC,YAAF,IAEgBF,KCPnBG,EAAU,I,sCD0BdC,YAAc,WAAkB,IAAjBC,EAAgB,uDAAP,GACtBA,EAAOC,QAAP,uCAAe,WAAML,GAAN,eAAAM,EAAA,sEACQX,EAClBK,MAAMF,EAAiBE,IAFb,cACPO,EADO,yBAGNC,QAAQC,IAAIF,IAHN,2CAAf,yDC1BJC,QAAQC,IAAIP,EAAQC,YAAY,CAAC,UAAW,eAE5C,IAAMO,EAAW,CACb,CACIhB,OAAQ,GACRF,KAAM,GACNC,KAAM,IAEV,CACIC,OAAQ,GACRF,KAAM,GACNC,KAAM,KAUCkB,EAND,WACV,OAAO,4BACFD,EAASE,KAAI,SAAArB,GAAO,OAAI,kBAAC,EAAD,CAAMA,QAASA,SCnB1CsB,EAAQ,WACV,OAAO,kBAAC,EAAD,OCIIC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f5efe3df.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ content: { nome, tipo, numero } }) => {\n  return <>\n    <dt>#: {numero}</dt>\n    <dt>Nome: {nome}</dt>\n    <dd>Tipo: {tipo}</dd>\n  </>\n}\n\nexport default Card","import ApolloClient from 'apollo-boost'\nimport { gql } from \"apollo-boost\"\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-pokemon.now.sh/',\n});\n\nconst setNamesPokemons = (name) => {\n  const result = {\n    query: gql`\n      {\n        pokemon(name: \"${name}\") {\n          id\n          number\n          name\n          attacks {\n            special {\n              name\n              type\n              damage\n            }\n          }\n        }\n      }\n      `\n  }\n  return result\n}\n\nexport default class TestePokemon {\n  getPokemons = (querys = []) => {\n    querys.forEach(async query => {\n      const result = await client\n        .query(setNamesPokemons(query));\n      return console.log(result);\n    })\n  }\n}","import React from 'react'\nimport Card from './Card'\nimport GetPokemon from '../../services/testePokemon'\n\nconst pokemon = new GetPokemon()\nconsole.log(pokemon.getPokemons(['Pikachu', 'Bulbasaur']))\n\nconst listCard = [\n    {   \n        numero: '',\n        nome: '',\n        tipo: '',\n    },\n    {\n        numero: '',\n        nome: '',\n        tipo: '',\n    }\n]\n\nconst Cards = () => {\n    return <dl>\n        {listCard.map(content => <Card content={content} />)}\n    </dl>\n}\n\nexport default Cards","import React from 'react'\nimport Cards from './cards'\n\nconst Views = () => {\n    return <Cards />\n}\n\nexport { Views }","import React from 'react';\nimport './App.css';\nimport { Views } from './views'\n\nfunction App() {\n  return <Views />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}