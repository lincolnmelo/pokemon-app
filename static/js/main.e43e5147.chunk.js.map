{"version":3,"sources":["views/cards/LinearBuffer.jsx","views/cards/Card.jsx","views/cards/Cards.jsx","views/index.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","marginTop","spacing","LinearBuffer","classes","React","useState","completed","setCompleted","buffer","setBuffer","progress","useRef","useEffect","current","diff","Math","random","diff2","timer","setInterval","clearInterval","className","LinearProgress","variant","value","valueBuffer","color","grid","padding","card","maxWidth","GET_GREETING","gql","CardsContent","useQuery","loading","error","data","pokemons","map","elem","Grid","Card","key","name","CardActionArea","src","image","alt","CardContent","Typography","gutterBottom","component","types","CardActions","Button","size","edge","menuButton","aria-label","flexGrow","paper","textAlign","palette","text","secondary","Cards","container","direction","justify","alignItems","marginRight","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","common","white","marginLeft","searchIcon","height","pointerEvents","justifyContent","inputRoot","inputInput","transition","transitions","create","Views","AppBar","Toolbar","IconButton","noWrap","InputBase","placeholder","input","inputProps","App","Boolean","window","location","hostname","match","client","ApolloClient","uri","WrappedApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e43e5147.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '80%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function LinearBuffer() {\n  const classes = useStyles();\n  const [completed, setCompleted] = React.useState(0);\n  const [buffer, setBuffer] = React.useState(10);\n\n  const progress = React.useRef(() => {});\n  React.useEffect(() => {\n    progress.current = () => {\n      if (completed > 100) {\n        setCompleted(0);\n        setBuffer(10);\n      } else {\n        const diff = Math.random() * 10;\n        const diff2 = Math.random() * 10;\n        setCompleted(completed + diff);\n        setBuffer(completed + diff + diff2);\n      }\n    };\n  });\n\n  React.useEffect(() => {\n    function tick() {\n      progress.current();\n    }\n    const timer = setInterval(tick, 500);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress variant=\"buffer\" value={completed} valueBuffer={buffer} />\n      <LinearProgress variant=\"buffer\" value={completed} valueBuffer={buffer} color=\"secondary\" />\n    </div>\n  );\n}\n","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport InfoSharpIcon from '@material-ui/icons/InfoSharp';\nimport './Card.css'\n\n\nimport LinearBuffer from './LinearBuffer'\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles({\n  grid: {\n    padding: 5\n  },\n  card: {\n    maxWidth: 345,\n  }\n});\n\nconst GET_GREETING = gql`\n  {\n    pokemons(first: 10){\n      id\n      name\n      image\n      types\n      evolutions {\n        name\n        image\n      }\n      attacks{\n        fast{\n          name\n          damage\n        }\n        special{\n          name\n          damage\n        }\n      }\n    }\n  }\n`;\n\nexport function CardsContent() {\n  const classes = useStyles()\n  const { loading, error, data } = useQuery(GET_GREETING);\n  if (loading) return (<LinearBuffer />)\n  if (error) return <p>Error ...</p>;\n\n  return data.pokemons.map(elem => {\n    return (\n      <Grid className={classes.grid}>\n        <Card key={elem.name} className={classes.card}>\n          <CardActionArea>\n            <img className={'img'} src={elem.image} alt=\"\"/>\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {elem.name}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                Tipo: {elem.types}\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" color=\"primary\">\n              <InfoSharpIcon edge=\"start\" className={classes.menuButton} color=\"primary\" aria-label=\"Mais\">\n              </InfoSharpIcon>\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    )\n  })\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { CardsContent } from './Card'\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    padding: 10\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function Cards() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n      >\n        <CardsContent />\n      </Grid>\n    </div>\n  );\n}","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Cards from './cards/Cards'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 120,\n      '&:focus': {\n        width: 200,\n      },\n    },\n  },\n}));\n\nexport default function Views() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Pokemons\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search…\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </div>\n        </Toolbar>\n        </AppBar>\n      <Cards />\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport  Views  from './views'\n\nfunction App() {\n  return <Views />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-components';\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-pokemon.now.sh/',\n});\n\nconst WrappedApp = (\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n\nReactDOM.render(WrappedApp, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}